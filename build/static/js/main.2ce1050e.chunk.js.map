{"version":3,"sources":["serviceWorker.js","Compnets/AllTodos.jsx","Compnets/HeaderComponent.jsx","Compnets/NavComponet.jsx","Compnets/SearchTodo.jsx","Compnets/Todoapp.jsx","index.js"],"names":["Boolean","window","location","hostname","match","AllTodos","props","Arryin","statusBtnEdit","statusBtnTrash","statusBtnTrashNote","statusBtnDone","statusBtnDoneNote","bgCardStatus","todoTrash","backgroundColor","DateGenerit","EndDay","tododone","Card","className","Body","style","todotitle","Row","Col","Date","id","toLocaleTimeString","Footer","Button","onClick","variant","TodoTerash","memo","NavComponet","TodoList","MenuAll","MenuTodo","MenuDone","MenuTrash","menuContorlDone","menuContorlTrash","menuContorlTodo","badgecontorlTodo","badgecontorlAllTodo","badgecontorlDone","badgecontorlTerash","Todotask","filter","item","DoneTask","TerashTask","length","Nav","fill","defaultActiveKey","lg","md","sm","xs","Item","Link","eventKey","Badge","SearchTodo","useState","Searchvalue","setSearchvalue","itemSerch","SearchInput","slice","Form","Control","required","value","onChange","e","target","type","placeholder","map","index","key","MiladotoShamsi","newDate","gy","gm","gd","g_d_m","jy","gy2","days","parseInt","gregorian_to_jalali","getFullYear","getMonth","getDate","ReactDOM","render","title","settitle","status","setstatus","JSON","parse","localStorage","getItem","setTodoList","selectedDay","setSelectedDay","useEffect","setItem","stringify","minimumDates","year","month","day","Container","fluid","onSubmit","preventDefault","timenow","getTime","DateShamsi","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","minimumDate","inputPlaceholder","shouldHighlightWeekends","locale","block","idin","info","iditem","error","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ce1050e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { Card, Button, Row, Col } from 'react-bootstrap'\r\nimport React from 'react'\r\nexport default function AllTodos(props) {\r\n    const { Arryin } = props;\r\n    let statusBtnEdit = '';\r\n    let statusBtnTrash = '';\r\n    let statusBtnTrashNote = '';\r\n    let statusBtnDone = '';\r\n    let statusBtnDoneNote = '';\r\n    let bgCardStatus = {};\r\n\r\n    if (Arryin.todoTrash) {\r\n        statusBtnDone = 'fa  fa-check disabled ';\r\n        statusBtnDoneNote = 'انجام شده ';\r\n        statusBtnEdit = 'fa fa-pencil disabled';\r\n        statusBtnTrash = 'fa fa-refresh';\r\n        statusBtnTrashNote = ' باز گشت ';\r\n        bgCardStatus = { backgroundColor: \"#FFB8B8\" };\r\n    }\r\n    else {\r\n        statusBtnDone = ' fa  fa-check ';\r\n        statusBtnDoneNote = ' انجام شده';\r\n        statusBtnEdit = 'fa fa-pencil ';\r\n        statusBtnTrash = 'fa fa-trash';\r\n        statusBtnTrashNote = ' حذف ';\r\n        bgCardStatus = { backgroundColor: \"#f4fbff\" };\r\n    }\r\n    if (Arryin.DateGenerit === Arryin.EndDay) {\r\n        bgCardStatus = { backgroundColor: \"rgba(255, 225, 78, 0.73)\" };\r\n    }\r\n    if (Arryin.tododone) {\r\n        statusBtnDone = ' fa fa-arrow-right ';\r\n        statusBtnDoneNote = ' بازگشت به در حال انجام  ';\r\n        statusBtnEdit = 'fa fa-pencil disabled';\r\n        statusBtnTrash = 'fa fa-trash';\r\n        statusBtnTrashNote = ' حذف ';\r\n        bgCardStatus = { backgroundColor: \"#d2fabb\" };\r\n        \r\n    }\r\n    return (\r\n        <Card className='mt-3 mb-3'>\r\n            <Card.Body style={bgCardStatus}>\r\n                {Arryin.todotitle}\r\n                <Row>\r\n                    <Col>ایجاد شده در:<br />\r\n                        <span>{new Date(Arryin.id).toLocaleTimeString()}</span><br />\r\n                        <span> {Arryin.DateGenerit}</span>\r\n                    </Col>\r\n                    <Col>\r\n                        تاریخ پایان :\r\n                        <p>{Arryin.EndDay}</p>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                <Row>\r\n                    <Col>\r\n                        <Button\r\n                            onClick={props.tododone}\r\n                            variant='success'\r\n                            className={statusBtnDone}>\r\n                            <span className='btn-el'>{statusBtnDoneNote}</span></Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            variant='success'\r\n                            className={statusBtnEdit}><span className='btn-el'> ویرایش </span></Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            onClick={props.TodoTerash}\r\n                            variant='danger'\r\n                            className={statusBtnTrash}\r\n                        ><span className='btn-el'>{statusBtnTrashNote}</span></Button>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Footer>\r\n        </Card>\r\n    )\r\n}\r\n","import React, { memo } from 'react'\r\nimport { Row, Col } from 'react-bootstrap'\r\n\r\nconst HeaderComponent = () => {\r\n    return (\r\n        <Row className='headerRow' >\r\n            <Col className='d-flex flex-row mt-3'  >\r\n                <h3>سامانه مدیریت کارها</h3>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default memo(HeaderComponent)","import React from 'react'\r\nimport { Row, Col, Nav, Badge } from 'react-bootstrap'\r\nexport default function NavComponet(props) {\r\n\r\n    const { TodoList, MenuAll, MenuTodo, MenuDone, MenuTrash } = props;\r\n    let menuContorlDone = '';\r\n    let menuContorlTrash = '';\r\n    let menuContorlTodo = '';\r\n    let badgecontorlTodo = '';\r\n    let badgecontorlAllTodo = '';\r\n    let badgecontorlDone = '';\r\n    let badgecontorlTerash = '';\r\n    let Todotask = TodoList.filter((item) => {\r\n        if (item.tododone || item.todoTrash)\r\n            return false\r\n        return true\r\n    })\r\n    let DoneTask = TodoList.filter((item) => {\r\n        if (item.todoTrash || !item.tododone)\r\n            return false\r\n        return true\r\n    }\r\n    );\r\n    let TerashTask = TodoList.filter((item) => item.todoTrash);\r\n    if (!DoneTask.length) menuContorlDone = ' disabled ';\r\n    if (!TerashTask.length) menuContorlTrash = ' disabled ';\r\n    if (!Todotask.length) menuContorlTodo = ' disabled ';\r\n    if (TodoList.length > 0) badgecontorlAllTodo = TodoList.length;\r\n    if (Todotask.length > 0) badgecontorlTodo = Todotask.length;\r\n    if (DoneTask.length > 0) badgecontorlDone = DoneTask.length;\r\n    if (TerashTask.length > 0) badgecontorlTerash = TerashTask.length;\r\n    return (\r\n        <Row>\r\n            <Col className='mt-5 mb-3'>\r\n                <Nav fill variant=\"tabs\" defaultActiveKey='All'>\r\n                    <Col lg={3} md={3} sm={3} xs={3} >\r\n                        <Nav.Item >\r\n                            <Nav.Link eventKey='All' onClick={MenuAll}>همه\r\n                             <Badge variant='success' className=\"mx-1\">{badgecontorlAllTodo}</Badge>\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Col>\r\n                    <Col lg={3} md={3} sm={3} xs={3} >\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey='Todo'\r\n                                onClick={MenuTodo}\r\n                                className={menuContorlTodo}>درحال انجام\r\n                                    <Badge variant='success' className=\"mx-1\">{badgecontorlTodo}</Badge>\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Col>\r\n                    <Col lg={3} md={3} sm={3} xs={3} >\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey='Done'\r\n                                onClick={MenuDone}\r\n                                className={menuContorlDone}>انجام شده\r\n                                    <Badge variant='success' className=\"mx-1\">{badgecontorlDone}</Badge>\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Col>\r\n                    <Col lg={3} md={3} sm={3} xs={3} >\r\n                        <Nav.Item>\r\n                            <Nav.Link eventKey='Trash'\r\n                                onClick={MenuTrash}\r\n                                className={menuContorlTrash}>\r\n                                حذف شده\r\n                                         <Badge variant='success' className=\"mx-1\">{badgecontorlTerash}</Badge>\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Col>\r\n                </Nav>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Col, Form, Row } from 'react-bootstrap'\r\nimport AllTodos from './AllTodos'\r\n\r\nexport default function SearchTodo(props) {\r\n    const [Searchvalue, setSearchvalue] = useState('')\r\n\r\n    const { itemSerch } = props\r\n\r\n    const HandleSearch = e => setSearchvalue(e.target.value)\r\n\r\n    const SearchMax = itemSerch ? itemSerch.slice(0, 10) : null\r\n\r\n    let SearchInput = SearchMax.filter((item) => {\r\n        if (item.todotitle === Searchvalue)\r\n            return true;\r\n        else\r\n            return false;\r\n    })\r\n\r\n    return (\r\n        <Row>\r\n            <Col lg={12} md={12} sm={12} xs={12} className='mt-3'>\r\n                <Form.Control\r\n                    required\r\n                    value={Searchvalue}\r\n                    onChange={HandleSearch}\r\n                    type='text'\r\n                    placeholder='جستجو در میان کار ها'\r\n                />\r\n\r\n            </Col>\r\n            <Col>\r\n                <p className='text-center m-2'> {SearchInput.length > 0 ? SearchInput.length + ' مورد یافت شد ' : null}</p>\r\n                {\r\n                    SearchInput ?\r\n                        SearchInput.map((item, index) => (\r\n                            <AllTodos\r\n                                key={index}\r\n                                Arryin={item}\r\n                            />\r\n                        ))\r\n                        : null\r\n                }\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap'\r\nimport AllTodos from './AllTodos'\r\nimport HeaderComponent from './HeaderComponent';\r\nimport NavComponet from './NavComponet';\r\nimport SearchTodo from './SearchTodo';\r\nimport DatePicker from \"react-modern-calendar-datepicker\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\n\r\n\r\nexport default function Todoapp() {\r\n    const [title, settitle] = useState('')\r\n    const [status, setstatus] = useState('All')\r\n    const [TodoList, setTodoList] = useState(JSON.parse(localStorage.getItem('todoListStorig')) || [])\r\n    const [selectedDay, setSelectedDay] = useState(null);\r\n\r\n    const HandelOnchngTodo = e => settitle(e.target.value)\r\n\r\n    const HandleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let timenow = new Date().getTime();\r\n\r\n        let DateShamsi = MiladotoShamsi()[0] + '/' + MiladotoShamsi()[1] + '/' + MiladotoShamsi()[2]\r\n        setTodoList([\r\n\r\n            {\r\n                todotitle: title,\r\n                tododone: false,\r\n                todoTrash: false,\r\n                id: timenow,\r\n                DateGenerit: DateShamsi,\r\n                EndDay: selectedDay ? selectedDay.year + '/' + selectedDay.month + '/' + selectedDay.day : 'زمان پایان انتخاب نشده'\r\n\r\n            },\r\n            ...TodoList],\r\n        );\r\n\r\n        settitle('');\r\n\r\n\r\n\r\n        toast.success('کار جدید اضافه شد', {\r\n            position: \"bottom-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        localStorage.setItem('todoListStorig', JSON.stringify(TodoList))\r\n    })\r\n\r\n    const HandelDone = idin => {\r\n        TodoList.map((item) => {\r\n            \r\n            if (item.id === idin) {\r\n                item.tododone = !item.tododone\r\n                if (item.todoTrash) {\r\n                    item.todoTrash = false\r\n                }\r\n                if (item.tododone) {\r\n                    toast.success('اتمام کار ثبت شد', {\r\n                        position: \"bottom-left\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                    });\r\n                }\r\n                else {\r\n                    toast.info('به لیست کارهای درحال انجام اضافه شد.', {\r\n                        position: \"bottom-left\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                    });\r\n                }\r\n \r\n            }\r\n            else {\r\n                return item\r\n            }\r\n        })\r\n        setTodoList([...TodoList])\r\n\r\n\r\n    }\r\n    const handelMenuAll = () => setstatus('All')\r\n    const handelMenuTodo = () => setstatus('Todo')\r\n    const handelMenuDone = () => setstatus('Done')\r\n    const handelMenuTrash = () => setstatus('Trash')\r\n\r\n    const HandelTerash = (iditem) => {\r\n        if (TodoList) {\r\n            TodoList.map((item) => {\r\n                if (item.id === iditem) {\r\n                    item.todoTrash = !item.todoTrash\r\n                    if (item.tododone) {\r\n                        item.tododone = false\r\n                    }\r\n                    if (item.todoTrash) {\r\n                        toast.error('به حذف شده ها منتقل شد.', {\r\n                            position: \"bottom-left\",\r\n                            autoClose: 5000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.info('به لیست کارهای درحال انجام منتقل شد.', {\r\n                            position: \"bottom-left\",\r\n                            autoClose: 5000,\r\n                            hideProgressBar: false,\r\n                            closeOnClick: true,\r\n                            pauseOnHover: true,\r\n                            draggable: true,\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    return item\r\n                }\r\n            })\r\n            setTodoList([...TodoList])\r\n        }\r\n\r\n    }\r\n\r\n    let Todotask = TodoList.filter((item) => {\r\n        if (item.tododone || item.todoTrash)\r\n            return false\r\n        return true\r\n    })\r\n    let DoneTask = TodoList.filter((item) => {\r\n        if (item.todoTrash || !item.tododone)\r\n            return false\r\n        return true\r\n    }\r\n    );\r\n    let TerashTask = TodoList.filter((item) => item.todoTrash);\r\n\r\n    let render = [];\r\n    if (status === 'Trash') { render = TerashTask }\r\n    else if (status === 'Todo') { render = Todotask }\r\n    else if (status === 'Done') { render = DoneTask }\r\n    else { render = TodoList }\r\n\r\n    const minimumDates = {\r\n        year: MiladotoShamsi()[0],\r\n        month: MiladotoShamsi()[1],\r\n        day: MiladotoShamsi()[2]\r\n    };\r\n    return (\r\n        <Container fluid>\r\n        <header>\r\n          <HeaderComponent />\r\n        </header>\r\n            <Row>\r\n                <Col lg={12} md={12} sm={12} xs={12} className='mt-5 mb-5'>\r\n                    <Form onSubmit={HandleSubmit}>\r\n                        <Form.Row>\r\n                            <Col lg={6} md={6} sm={6} xs={12} className='mt-3'>\r\n                                <Form.Control\r\n                                    required\r\n                                    placeholder='افزودن کار....'\r\n                                    type='text'\r\n                                    value={title}\r\n                                    onChange={HandelOnchngTodo}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3} md={3} sm={6} xs={12} className='mt-3'>\r\n                                <DatePicker\r\n                                    value={selectedDay}\r\n                                    onChange={setSelectedDay}\r\n                                    minimumDate={minimumDates}\r\n                                    inputPlaceholder=\"انتخاب موئد پایان\"\r\n                                    shouldHighlightWeekends\r\n                                    locale=\"fa\"\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3} md={3} sm={12} xs={12} className='mt-3'>\r\n                                <Button\r\n                                    block\r\n                                    type='submit'\r\n                                >اضافه کن</Button>\r\n                            </Col>\r\n                        </Form.Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            <SearchTodo\r\n                itemSerch={TodoList}\r\n            />\r\n            <NavComponet\r\n                TodoList={TodoList}\r\n                MenuAll={handelMenuAll}\r\n                MenuTodo={handelMenuTodo}\r\n                MenuDone={handelMenuDone}\r\n                MenuTrash={handelMenuTrash} />\r\n            <Row>\r\n                <Col>\r\n                    {\r\n                        render.map((item, index) => (\r\n                            <AllTodos\r\n                                key={index}\r\n                                Arryin={item}\r\n                                tododone={() => HandelDone(item.id)}\r\n                                TodoTerash={() => HandelTerash(item.id)}\r\n                            />\r\n                        ))\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <ToastContainer />\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction MiladotoShamsi() {\r\n\r\n\r\n    function gregorian_to_jalali(gy, gm, gd) {\r\n        var g_d_m, jy, jm, jd, gy2, days;\r\n        g_d_m = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\r\n        if (gy > 1600) {\r\n            jy = 979;\r\n            gy -= 1600;\r\n        } else {\r\n            jy = 0;\r\n            gy -= 621;\r\n        }\r\n        gy2 = (gm > 2) ? (gy + 1) : gy;\r\n        days = (365 * gy) + (parseInt((gy2 + 3) / 4)) - (parseInt((gy2 + 99) / 100)) + (parseInt((gy2 + 399) / 400)) - 80 + gd + g_d_m[gm - 1];\r\n        jy += 33 * (parseInt(days / 12053));\r\n        days %= 12053;\r\n        jy += 4 * (parseInt(days / 1461));\r\n        days %= 1461;\r\n        if (days > 365) {\r\n            jy += parseInt((days - 1) / 365);\r\n            days = (days - 1) % 365;\r\n        }\r\n        jm = (days < 186) ? 1 + parseInt(days / 31) : 7 + parseInt((days - 186) / 30);\r\n        jd = 1 + ((days < 186) ? (days % 31) : ((days - 186) % 30));\r\n        return [jy, jm, jd];\r\n    }\r\n\r\n    let newDate = new Date()\r\n    let finalDate = gregorian_to_jalali(newDate.getFullYear(), newDate.getMonth() + 1, newDate.getDate());\r\n\r\n    return (finalDate)\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Todoapp from './Compnets/Todoapp';\r\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\r\nReactDOM.render(<Todoapp />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}